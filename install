#!/bin/bash

function usage()
{
cat  <<EOF

Uniform utility to build the installable artifact and install it locally or remotely.

    ./install [--verbose|-v] [--force] [environment-name]

Where:

     --force - if the version being installed is already installed, the script will stop,
        unless --force is specified.

     environment-name - the name of the environment to install into. If not specified
        install locally. A list of environments and associated configuration can be found
        in the ./util/environments directory.

Other Options:

     --clean - performs an maven clean before attempting to build

     --no-tests

Examples:

    Build and install the current version locally:

        ./install

    Build and install the current version locally, overwritting the copy that is already
    installed.

        ./install --force

    Build and install the current version in ec2-default, overwritting the copy that is
    already installed.

        ./install ec2-default --force

EOF
}

help=false
verbose=false
no_tests=false
project_home="."

function debug()
{
    ${verbose} && echo "$@" 1>&2;
    return 0
}

function debug-arguments
{
    ${verbose} && echo "${FUNCNAME[1]}($@)" 1>&2;
    return 0
}

function fail
{
    echo "[error]: $@" 1>&2 && exit 1
}

#
# returns the version from pom.xml
#
function get-version()
{
    debug-arguments $@
    [ -z ${project_home} ] && fail "global variable 'project_home' not defined"
    local pom_file=${project_home}/pom.xml
    [ -f ${pom_file} ] || fail "POM file ${pom_file} not found"
    local line;
    line=$(grep "^ *<version>" ${pom_file} | head -1) || fail "failed to get <version> from ${pom_file}"
    [ "${line}" = "" ] && fail "empty version in ${pom_file}"
    local version;
    version=${line#*>}
    version=${version%%\<*}
    [ "${version}" = "" ] && fail "could not extract version from ${pom_file}"
    echo ${version}
}

#
# returns the artifact base name from pom.xml
#
function get-artifact-base-name()
{
    debug-arguments $@
    [ -z ${project_home} ] && fail "global variable 'project_home' not defined"
    local pom_file=${project_home}/pom.xml
    [ -f ${pom_file} ] || fail "POM file ${pom_file} not found"
    local line;
    line=$(grep "^ *<artifactId>" ${pom_file} | head -1) || fail "failed to get <artifactId> from ${pom_file}"
    [ "${line}" = "" ] && fail "empty artifactId in ${pom_file}"
    local artifact_base_name;
    artifact_base_name=${line#*>}
    artifact_base_name=${artifact_base_name%%\<*}
    [ "${artifact_base_name}" = "" ] && fail "could not extract artifact base name from ${pom_file}"
    echo ${artifact_base_name}
}

function get-artifact-zip-name()
{
    debug-arguments $@
    local version
    version=$(get-version) || exit 1
    local artifact_base_name;
    artifact_base_name=$(get-artifact-base-name) || exit 1
    echo ${artifact_base_name}-${version}.zip
}

function clean()
{
    debug-arguments $@
    [ -z ${project_home} ] && fail "global variable 'project_home' not defined"

    local maven_quiet="-q"
    ${verbose} && maven_quiet=""

    (cd ${project_home}; mvn ${maven_quiet} clean) && debug "mvn ${maven_quiet} clean" || exit 1
}

#
# returns 0 (true) if the zip corresponding to the current version is available, 1 (false) otherwise
#
function is-zip-available()
{
    debug-arguments $@
    [ -z ${project_home} ] && fail "global variable 'project_home' not defined"
    [ -f ${project_home}/target/$(get-artifact-zip-name) ] && return 0
    return 1
}

function build-zip()
{
    debug-arguments $@
    [ -z ${project_home} ] && fail "global variable 'project_home' not defined"

    local skip_tests_arg
    ${no_tests} && skip_tests_arg="-Dmaven.test.skip=true"

    local maven_quiet="-q"
    ${verbose} && maven_quiet=""

    (cd ${project_home}; mvn ${maven_quiet} clean package ${skip_tests_arg}) && debug "mvn ${maven_quiet} clean package ${skip_tests_arg}" || exit 1

    local version
    version=$(get-version) || exit 1
    local artifact_base_name
    artifact_base_name=$(get-artifact-base-name) || exit 1

    mkdir -p ${project_home}/target/${artifact_base_name}-${version}/lib && debug "created directory ${project_home}/target/${artifact_base_name}-${version}/lib" || exit 1
    mkdir ${project_home}/target/${artifact_base_name}-${version}/bin && debug "created directory ${project_home}/target/${artifact_base_name}-${version}/bin" || exit 1
    cp ${project_home}/target/${artifact_base_name}-${version}.jar ${project_home}/target/${artifact_base_name}-${version}/lib && debug "copied ${project_home}/target/${artifact_base_name}-${version}.jar in ${project_home}/target/${artifact_base_name}-${version}/lib" || exit 1;
    cp ${project_home}/src/main/bash/gld ${project_home}/target/${artifact_base_name}-${version}/bin && debug "copied ${project_home}/src/main/bash/gld in ${project_home}/target/${artifact_base_name}-${version}/bin" || exit 1;
    chmod a+rx ${project_home}/target/${artifact_base_name}-${version}/bin/gld && debug "chmod a+rx ${project_home}/target/${artifact_base_name}-${version}/bin/gld" || exit 1;
    cp ${project_home}/src/main/bash/cca ${project_home}/target/${artifact_base_name}-${version}/bin && debug "copied ${project_home}/src/main/bash/cca ${project_home}/target/${artifact_base_name}-${version}/bin" exit 1;
    chmod a+rx ${project_home}/target/${artifact_base_name}-${version}/bin/cca && debug "chmod a+rx ${project_home}/target/${artifact_base_name}-${version}/bin/cca" || exit 1;
    cp ${project_home}/README ${project_home}/target/${artifact_base_name}-${version} && debug "copied ${project_home}/README ${project_home}/target/${artifact_base_name}-${version}" || exit 1;

    local dependencies
    dependencies=$(get-dependencies) || exit 1
    debug "dependencies: ${dependencies}"
    for i in ${dependencies}; do
        [ -f ${i} ] || fail "dependency ${i} does not exist"
        cp ${i} ${project_home}/target/${artifact_base_name}-${version}/lib && debug "copied dependency ${i} in ${project_home}/target/${artifact_base_name}-${version}/lib" || exit 1;
    done

    local artifact_zip_name
    artifact_zip_name=$(get-artifact-zip-name) || exit 1

    local zip_quiet="-q"
    ${verbose} && zip_quiet=""

    (cd ${project_home}/target; zip ${zip_quiet} -r ${artifact_zip_name} ${artifact_base_name}-${version}) && debug "created ${project_home}/target/${artifact_base_name}-${version}.zip" || exit 1
}

function get-dependencies()
{
    [ -z ${project_home} ] && fail "global variable 'project_home' not defined"
    local maven_quiet="-q"
    ${verbose} && maven_quiet=""
    (cd ${project_home}; mvn ${maven_quiet} dependency:build-classpath -Dmdep.pathSeparator=" " -Dmdep.outputFile=./target/dependencies.txt 1>&2) && debug "executed mvn ${maven_quiet} dependency:build-classpath -Dmdep.pathSeparator=\" \" -Dmdep.outputFile=./target/dependencies.txt" || exit 1
    cat ${project_home}/target/dependencies.txt
}

function install-locally()
{
    debug-arguments $@

    local zip_file=$1
    local installation_dir=$2 # the system directory where third-party software is installed (/opt or /usr/local)
    local force=$3 # if not specified, defaults to "false"

    [ -z ${zip_file} ] && fail "no zip file name provided"
    [ -z ${installation_dir} ] && fail "no installation directory name provided"
    [ -d ${installation_dir} ] || fail "installation directory ${installation_dir} does not exist"
    [ -z ${force} ] && force=false

    local home_dir=${installation_dir}/$(basename ${zip_file} .zip)
    debug "home_dir: ${home_dir}"

    if [ -d ${home_dir} ]; then

        ! ${force} && fail "${home_dir} already installed. Use '--force' to overwrite"

        # --force was used, remove the existing directory for a clean installation
        rm -r ${home_dir} && debug "removed existing ${home_dir}" || fail "failed to remove existing ${home_dir}"
    fi

    local unzip_quiet="-q"
    ${verbose} && unzip_quiet=""

    unzip ${unzip_quiet} ${zip_file} -d ${installation_dir} && debug "unzipped ${zip_file} into ${installation_dir}" || fail "failed to unzip ${zip_file} into ${installation_dir}"

    local link_name=$(basename ${zip_file} .zip)
    link_name=${link_name%%-*} # be prepared to handle gld-1.0.0, gld-1.0.0-SNAPSDHOT, etc.
    debug "link_name: ${link_name}"

    if [ -h ${installation_dir}/${link_name} ]; then
        rm ${installation_dir}/${link_name} && debug "removed existing link ${installation_dir}/${link_name}" || fail "failed to remove existing link ${installation_dir}/${link_name}"
    fi

    (cd ${installation_dir}; ln -s ${home_dir} ${link_name}) && debug "linked ${home_dir} to ${link_name}" || fail "failed to link ${home_dir} to ${link_name}"
}

function install-remotely()
{
    local remote_environment=$1
    fail "${FUNCNAME[0]} NOT YET IMPLEMENTED"

#    local version=$1
#    local environment=$2
#    local force=$3
#
#    debug "install_in_remote_environment(version: ${version}, environment: ${environment}, force: ${force})"
#
#    [ "${version}" = "" ] && { echo "'version' not specified" 1>&2; exit 1; }
#    [ "${environment}" = "" ] && { echo "'environment' not specified" 1>&2; exit 1; }
#
#    local zip_file=${project_home}/target/gld-${version}.zip
#
#    [ -f ${zip_file} ] || \
#        { echo "no release zip ${zip_file} found. Specify the correct version, or if the version '${version}' is correct, run ${reldir}/make-zip" 1>&2; exit 1; }
#
#    local environment_file=${reldir}/environments/${environment}
#
#    [ -f ${environment_file} ] || { echo "environment configuration file ${environment_file} does not exist" 1>&2; exit 1; }
#
#    local environment_user
#    local environment_installation_dir
#    local environment_hosts
#
#    . ${environment_file}
#
#    [ "${environment_user}" = "" ] && \
#        { echo "environment incorrectly configured: 'environment_user' not specfied in ${environment_file}" 1>&2; exit 1; }
#    [ "${environment_installation_dir}" = "" ] && \
#        { echo "environment incorrectly configured: 'environment_installation_dir' not specfied in ${environment_file}" 1>&2; exit 1; }
#    [ "${environment_hosts}" = "" ] && \
#        { echo "environment incorrectly configured: 'environment_hosts' not specfied in ${environment_file}" 1>&2; exit 1; }
#
#    for host in ${environment_hosts}; do
#        install-over-ssh ${environment_user} ${host} ${environment_installation_dir} ${zip_file} ${force} || exit 1
#    done
#
#    echo "gld-${version} installed in environment ${environment}"
}

function install-over-ssh()
{
    fail "${FUNCNAME[0]} NOT YET IMPLEMENTED"

#    local user=$1
#    local host=$2
#    local installation_dir=$3
#    local zip_file=$4
#    local force=$5
#
#    debug "installing into ${user}@${host}"
#
#    [ "${user}" = "" ] && { echo "'user' not specified" 1>&2; exit 1; }
#    [ "${host}" = "" ] && { echo "'host' not specified" 1>&2; exit 1; }
#    [ "${installation_dir}" = "" ] && { echo "'installation_dir' not specified" 1>&2; exit 1; }
#    [ "${zip_file}" = "" ] && { echo "'zip_file' not specified" 1>&2; exit 1; }
#    [ -f ${zip_file} ] || { echo "${zip_file} does not exist" 1>&2; exit 1; }
#
#    echo "uploading artifacts to ${user}@${host} ..."
#    scp ${zip_file} $0 ${user}@${host}:${installation_dir} || \
#        { echo "failed to scp to ${user}@${host}:${installation_dir}" 1>2; exit 1; }
#
#    ${force} && force_flag="--force"
#    ${verbose} && verbose_flag="--verbose"
#
#    ssh ${user}@${host} "${installation_dir}/$(basename $0) ${verbose_flag} --source ${installation_dir}/$(basename ${zip_file}) --target ${installation_dir} ${force_flag}" || \
#        { echo "failed to execute the remote installation script on ${user}@${host}" 1>2; exit 1; }
}

function main()
{
    local force
    local remote_environment
    local clean
    while [ ! -z $1 ]; do
        if [ $1 = "--help" ]; then help=true
        elif [ $1 = "--verbose" -o $1 = "-v" ]; then verbose=true;
        elif [ $1 = "--no-tests" ]; then no_tests=true;
        elif [ $1 = "--clean" ]; then clean=true;
        elif [ $1 = "--force" ]; then force=true;
        elif [ -z ${remote_environment} ]; then remote_environment=$1;
        else fail "unknown argument: $1"
        fi
        shift
    done

    ${help} && { usage; exit 0; }

    project_home=$(dirname $0)

    ${clean} && clean;

    ! is-zip-available && build-zip

    if [ -z ${remote_environment} ]; then
        install-locally ${project_home}/target/$(get-artifact-zip-name) ${RUNTIME_DIR} ${force}
    else
        install-remotely ${remote_environment}
    fi
}

main $@

#    while [ "$1" != "" ]; do
#
#        elif [ "$1" = "--source" ]; then
#            shift
#            source=$1
#        elif [ "$1" = "--target" ]; then
#            shift
#            target=$1
#        shift
#    done
#
#    local remote_enviornment_install=false
#    local collocated=true
#
#    debug "source: ${source}, version: ${version}"
#
#    if [ "${source}" != "" ]; then
#
#        # this is an installation started remotely; the zip file was uploaded and it is available locally
#        collocated=false
#
#    elif [ "${version}" != "" ]; then
#
#         remote_enviornment_install=true
#         source=${project_home}/target/gld-${version}.zip
#
#    else
#
#        # local installation, the source is the just built zip
#        version=$(get_version) || exit 1
#        source=${project_home}/target/gld-${version}.zip
#
#    fi
#
#    [ -f ${source} ] || \
#        { echo "source file ${source} does not exist - either upload it or run ${reldir}/make-zip" 1>&2; exit 1; }
#
#    if [ "${target}" != "" ]; then
#        [ ! -d ${target} ] && { echo "--target directory ${target} does not exist" 1>&2; exit 2; }
#    else
#        [ "${RUNTIME_DIR}" = "" ] && { echo "neither --target nor RUNTIME_DIR defined" 1>&2; exit 1; }
#        [ ! -d ${RUNTIME_DIR} ] && { echo "RUNTIME_DIR ${RUNTIME_DIR} does not exist" 1>&2; exit 1; }
#        target=${RUNTIME_DIR}
#    fi
#
#    if ${remote_enviornment_install}; then
#        remote_environment_install "${version}" "${enviornment}" ${force}
#    else
#        install ${collocated} ${source} ${target} ${force}
#    fi
